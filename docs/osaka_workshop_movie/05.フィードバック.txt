動画
05: フィードバック @ 大阪ワークショップ 2017-02-25
https://www.youtube.com/watch?v=Fkod2-S7GHA&list=PLg41HKRyxE6jpvMiXuTHdvSzlB_9KDEWk&index=5

スライド
https://slide.rabbit-shocker.org/authors/oss-gate/workshop-tutorial-feedback/


フィードバック

いまのでミニふりかえりというのがおわりました。
その結果として、みんさん、新しい視点が得られた、ですよね？
あ、こういうふうなところでフィードバックできるんだな、
こういうふうな可能性あるんだな、とか
メモ役に立つな、っていうふうな気持ちに
なったよっていう。

っていうかんじなので
じっさいに見つかったフィードバックポイントが
何個も見つかったっていうひともいれば
一個しかみつからなかったていう人もいるかもしれないですけど
今日は、それを一つ、じっさいにフィードバックする、
っていうのを経験します。

っていのが今からの時間です。

1時間くらいとるんですけど
そのなかでだいたいできるので大丈夫です。

やりかたですけども、実際にこうやるんだよっていう説明をして
実際にデモをして、紹介しますね。

で、この時間、何のためにやっていたか、
忘れていると思うので確認しますと、
OSSの開発に参加する人を増やしたい。
って言う取り組みの1つでやってて、
このワークショップは未参加の人が参加する人になるっていうのを支援するっていうのを
動機にしてます。

いままでで実際にインストールしてみてドキュメントどおりに動かしてみて
ユーザーの視点でいろいろやってみました。
で、その結果、楽しめましたか？

みなさんは、楽しんでやってます？

実際にフィードバックするって今からやります。

やり方、色々やり方はあるんですけども
今日は一個だけ、このやり方どうですか、
っていうのを提供するのがやりたいことなので
今回も1個だけこういうやり方おすすめです、っていうのを
見せます。

3段階になってます。
まず最初に、自分の考えを整理する。
っていのをやります。

この時点では自分がわかればいい、他の人がわからなくてもよくて
自分が、これはこういうふうなことで、こういうふうになったほうが良いと思う。
というようなことを自分の言葉でまとめられれば、いいです。

で、次に
フィードバックを受ける、開発者の人がわかるような形に、整理します。
その後に、実際に報告します。

この3段階、いいですか。

まず、ビギナーの人が自分にわかる形式でまとめる。
それを開発してる人がわかる形式に整理する。
実際それをフィードバックする。

やり方、それぞれ説明していきます。
整理するところですけども
もしかしたらまだもやもやっとしたじょうたいで
まとめれないかもしれない。
ですけども、それをまとめるっていうのを頑張ってください。

で、この時にメンターの人がどう頑張るかって言うと
なんかいい感じの質問をするわけですね。

これはどうしてそう思ったんですかね？
どうなるといいとおもいますかね？
あ、だったら自分はこうなるとうれしいですね。
って感じで引き出して、
自分がここで困った、こうなったらいいな
っていうのをまとめる、というのを手伝ってあげてください。

オレならこうまとめる、ド～～～ン、どやー。
あ、そうですね。
みたいなのは、微妙です。

整理するのを手伝ってあげてください。

いいですね。

これはさっきまで使ってた作業メモに追記してください。

自分はこういうのフィードバックしようとして
こういうふうに考えてる、
人がわからなくてもいいけど、自分はこう考えている
っていうのをコメントします。

その後に編集するところ、
開発者の人が分かるように整理するところは

メンターの人は、開発者だったらこういうところが気になるよ、だとか
これだと開発者の人にはたわらないので、こういうことを説明してくださいとか、
開発者視点のことを伝えてあげてください。

そうすることによって
自分だけが分かる文章から、開発者の人が分かる文章になっていくので
そこら辺を手伝ってあげてください。メンターの人は。

OSSによっては、こんな感じで報告してくれると嬉しいよ。
っていうのをまとめてる文章をだしてくれてるところもあるので
そういうのがもしあるんであれば、参考にしてもらって
まとめるといいでしょう。

これも、まとまったら新しいコメントで追記してください。
既存のやつを編集して、直していく必要はなくて
追記、追記でいいです。

あとは、だいたいがインターネット越しになります。
直接会って、こうこうこう、っていう話じゃなくて
インターネット越しです。

そういう時は、いろんなことを共有できてないです。
なので、相手が分かるように書く、っていうのは
普段直接会話してるときとやり方が変わってきます。

ポイントの1つは省略しないことです。

どういうことかっていうと

インストールしたんですけど動きませんでした、みたいなのは
たぶん、やった人はわかってるんですよ。
何もかも、これで伝わるんですね。

このコマンドでインストールしたとか、こういうエラーが出たとかみたいのは
やった人はわかってるんですけど
これ、やってない人から見ると、
わからないじゃないですか。
っていうのが起こりやすい。

極端な例かもしれないですけども。

例えばどうすればいいかというと、
このコマンドで実行したとか、
この環境で実行したとか書くと
インターネット越しの人でも伝わりやすくなるとかあるわけですね。
っていうのが伝えるポイントとしてあります。
メンターの人がフォローするときのポイントとして。

そういう省略しないということを意識してみるといいかもしれません。
初略し無いというと、
やったことをちゃんと書くとか、というのは思いつくと思うんですけど
やってないことも書くのも大事です。

インストールドキュメントにはこう書いてあったけども
実はそれをやってなくて
違うコマンドでやってました、っていうのって
開発者がわからしたら、やったんだろうって思ってるけど
やってなかったんかい、みたいなのでずれちゃうみたいのもあると思うんで
もしそれをやってないんだったらそれを書いたほうが良い。

メンターの人は参考にしてください

報告するほうほうは、適切な場所を見つけて報告するだけです。
初めて報告する人は、いいのかなこれで
ボコられないのかな、みたいな気持ちになるんですけども
ここでメンターの人が役に立つのは
あ、大丈夫ですよ、それで。
みたいな感じのことを言うのが大事なところです。

こうプルプルしてたら、うしろから背中をドンと押してやって
ああぁっ、

じゃあ実際にどうやるかっていうのをデモしますね。

jekyllのやつでフィードバックポイントまで行かなかったので
ラビットのやつでやります。

Bundlerを使ってインストールするのが良いんじゃないか、
というのをやる、っていう例ですね。

これは私が作ったJekyllのところに私の例を出す。

インストールドキュメントにはgemでインストールと書いているけども
Bundlerを使ったほうが良いと思うんだよな。
なぜならまるまるだし、
ハッ！
もずくにレポートする・・・。

なぜなら、みたいなことを書く
ここでは、私がわかればいいと言う感じで書けば良いんです。

でその後にじゃこれを開発者に分かるようにまとめる。

インストールドキュメントはどれを参照したからちゃんと分かるほうがいいだろうな、というので
あ、開発者はたぶん英語のほうがいいんじゃないかな
って思う、みたいな気持ちになるんじゃないですか、ここで。
日本語がはいらないし

インストールドキュメントはgemをつかってるけど
bundleがいいんじゃないかなぁ
because，フンフンフン
私の環境はOS Xで。。。とか
なんでgemがよくないか
っていうのを

ここではbundlerの方がいいんだけどなぁ、というだけなんだけど、
こっちの方では、なぜいいか、というようなことをやって

まとまったら実際に
issueの方にこれをコピペして、
ああぁっ、って
ポンッてやってあげる、ていうまでが
1連のこの1時間でやることです。

わかりましたか？
大丈夫ですか？

今回やってみて、つまずいたところあったら
私も後藤さんもぶらぶらしてるので
聞いてください。

いいですか、
じゃあ始めてください。

